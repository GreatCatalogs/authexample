fragment Catalog on Catalog {
  id
  oid
  name
  title
  merchantId
  customSubdomain
  text2Disclaimer
  options
  description
}

fragment Product on Product {
  src
  additionalImages
  sku
  category
  tags
  title
  description
  tags
  url
  price
  salePrice
  options
  oid
  expired
  status
}
fragment Page on Page {
  oid
  imageSource
  imageUrl
  pageType
  options
}

fragment Feed on Feed {
  oid
  feedType
  feedMap
  productMap
  autoUpdate
  options
  dateModified
  catalog: catalogByCatalog {
    id
    oid
    name
  }
}

fragment Version on Version {
  id
  oid
  name
  coverUrl
  enableCategoryCatalogs
  contactUrl
  description
  options
  versionNo
  order
}

fragment Category on Category {
  id
  oid
  name
  image
  options
  subcategories: subCategoriesByCategory {
    id
    name
    image
    parent: categoryByCategory {
      name
    }
  }
}
query ProductBySku($sku: String!, $catalog: UUID!) {
  products(condition: { sku: $sku, catalog: $catalog }) {
    ...Product
  }
}
query FullCatalogById($id: Int!) {
  catalog: catalogById(id: $id) {
    ...Catalog
    products: productsByCatalog {
      ...Product
    }
    categories: categoriesByCatalog {
      ...Category
      products: subProductsByMainAndCatalog {
        sku
        sub
        main
      }
    }
    version: versionByActiveVersion {
      ...Version
      pages: pagesByVersion {
        ...Page
      }
    }
    account: accountByAccount {
      logo
      name
      catalogs: catalogsByAccount {
        id
        oid
        merchantId
        activeVersion: versionByActiveVersion {
          id
          oid
          name
          coverUrl
        }
      }
    }
  }
}
query FullVersionById($id: Int!) {
  version: versionById(id: $id) {
    ...Version
    pages: pagesByVersion {
      ...Page
    }
    catalog: catalogByCatalog {
      ...Catalog
      products: productsByCatalog {
        ...Product
      }
      categories: categoriesByCatalog {
        ...Category
        products: subProductsByMainAndCatalog {
          sku
          sub
          main
        }
      }
      account: accountByAccount {
        logo
        name
        catalogs: catalogsByAccount {
          id
          oid
          merchantId
          activeVersion: versionByActiveVersion {
            id
            oid
            name
            coverUrl
          }
        }
      }
    }
  }
}

query ActiveAccounts {
  accounts(condition: { active: true }, orderBy: NAME_ASC) {
    oid
    name
    email
    legacyId
    active
    logo
    catalogs: catalogsByAccount {
      ...Catalog
      activeVersion: versionByActiveVersion {
        ...Version
      }
      versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
        ...Version
      }
    }
  }
}

query CatalogByOid($oid: UUID!) {
  catalog(oid: $oid) {
    ...Catalog
    account: accountByAccount {
      logo
      name
      active
    }
    activeVersion: versionByActiveVersion {
      ...Version
    }
    versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
      ...Version
    }
  }
}

query CatalogByVersionId($id: Int!) {
  version: versionById(id: $id) {
    ...Version
    catalog: catalogByCatalog {
      ...Catalog
      account: accountByAccount {
        logo
        name
        active
      }
    }
  }
}
query CatalogById($id: Int!) {
  catalog: catalogById(id: $id) {
    ...Catalog
    account: accountByAccount {
      logo
      name
      active
    }
    activeVersion: versionByActiveVersion {
      ...Version
    }
    versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
      ...Version
    }
  }
}

query AllAuthorizedUsers {
  authorizedUsers {
    oid
    email
    accounts: authorizedUserAuthorizedUsersAccountPartnerAccessesByAuthorizedUsersConnection {
      totalCount
    }
  }
}

query UserByEmail($email: String!) {
  user: authorizedUserByEmail(email: $email) {
    oid
    email
    allAccounts: authorizedUserAuthorizedUsersAccountPartnerAccessesByAuthorizedUsers {
      account: accountByPartnerAccess {
        oid
        legacyId
        name
        active
        catalogs: catalogsByAccount {
          ...Catalog
          account: accountByAccount {
            logo
            name
            active
          }
          activeVersion: versionByActiveVersion {
            ...Version
          }
          versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
            ...Version
          }
        }
      }
    }
  }
}

query VersionFullById($id: Int!) {
  version: versionById(id: $id) {
    ...Version
    products: productsByVersionsByVersionOid {
      sku
    }
    pages: pagesByVersion {
      ...Page
    }
    catalog: catalogByCatalog {
      ...Catalog
      products: productsByCatalog {
        ...Product
      }
    }
  }
}

query ProductsByVersionId($id: Int!) {
  version: versionById(id: $id) {
    id
    oid
    name
    catalog: catalogByCatalog {
      id
      oid
      products: productsByCatalog {
        ...Product
      }
    }
  }
}
query ActiveVersionByCatalogID($id: Int!) {
  catalog: catalogById(id: $id) {
    ...Catalog
    account: accountByAccount {
      logo
      name
      active
    }
    activeVersion: versionByActiveVersion {
      ...Version
    }
  }
}

query ProductsCatalog($oid: UUID!) {
  catalog(oid: $oid) {
    id
    oid
    products: productsByCatalog {
      ...Product
    }
  }
}

query ProductsByCatalogId($id: Int!) {
  catalog: catalogById(id: $id) {
    id
    oid
    products: productsByCatalog {
      ...Product
    }
  }
}
query CategoriesByCatalogId($oid: UUID!) {
  catalog(oid: $oid) {
    id
    oid
    categories: categoriesByCatalog {
      ...Category
    }
  }
}
query CatalogCategories($id: Int!) {
  catalog: catalogById(id: $id) {
    id
    oid
    categories: categoriesByCatalog {
      ...Category
    }
  }
}
query CategoriesByVersionId($id: Int!) {
  version: versionById(id: $id) {
    id
    oid
    name
    catalog: catalogByCatalog {
      id
      oid
      categories: categoriesByCatalog {
        ...Category
      }
    }
  }
}
query LeadsAccount($account: UUID!) {
  leads(condition: { account: $account }) {
    oid
    firstName
    lastName
    email
    phone
    catalogId
    versionId
    accountByAccount {
      name
    }
  }
}

mutation UpdatePage($id: UUID!, $payload: PagePatch!) {
  updatePage(input: { patch: $payload, oid: $id }) {
    page {
      ...Page
    }
  }
}
mutation CreateCatalog($catalog: CatalogInput!) {
  createCatalog(input: { catalog: $catalog }) {
    catalog {
      ...Catalog
      account: accountByAccount {
        logo
        name
        active
      }
      activeVersion: versionByActiveVersion {
        ...Version
      }
      versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
        ...Version
      }
    }
  }
}
mutation UpdateCatalog($catalog: CatalogPatch!, $oid: UUID!) {
  updateCatalog(input: { patch: $catalog, oid: $oid }) {
    catalog {
      ...Catalog
      activeVersion: versionByActiveVersion {
        ...Version
      }
      versions: versionsByCatalog(orderBy: ID_DESC, offset: 0) {
        ...Version
      }
    }
  }
}
mutation DeleteCatalog($oid: UUID!) {
  deleteCatalog(input: { oid: $oid }) {
    catalog {
      oid
      id
    }
  }
}
mutation CreateVersion($version: VersionInput!) {
  createVersion(input: { version: $version }) {
    version {
      ...Version
      catalog: catalogByCatalog {
        ...Catalog
      }
    }
  }
}
mutation UpdateVersion($version: VersionPatch!, $oid: UUID!) {
  updateVersion(input: { patch: $version, oid: $oid }) {
    version {
      ...Version
      catalog: catalogByCatalog {
        ...Catalog
      }
    }
  }
}
mutation DeleteVersion($oid: UUID!) {
  deleteVersion(input: { oid: $oid }) {
    clientMutationId
    catalog: catalogByCatalog {
      oid
      id
    }
  }
}
mutation CreatePage($page: PageInput!) {
  createPage(input: { page: $page }) {
    page {
      ...Page
    }
  }
}
mutation DeletePage($oid: UUID!) {
  deletePage(input: { oid: $oid }) {
    page {
      oid
    }
  }
}
query CatalogFeeds {
  feeds {
    ...Feed
  }
}

mutation CreateFeed($feed: FeedInput!) {
  createFeed(input: { feed: $feed }) {
    feed {
      ...Feed
    }
  }
}
mutation UpdateFeed($feed: FeedPatch!, $oid: UUID!) {
  updateFeed(input: { patch: $feed, oid: $oid }) {
    feed {
      ...Feed
    }
  }
}
mutation DeleteFeed($oid: UUID!) {
  deleteFeed(input: { oid: $oid }) {
    feed {
      oid
    }
  }
}
mutation CreateCategory($category: CategoryInput!) {
  createCategory(input: { category: $category }) {
    category {
      ...Category
    }
  }
}
mutation UpdateCategory($category: CategoryPatch!, $oid: UUID!) {
  updateCategory(input: { patch: $category, oid: $oid }) {
    category {
      ...Category
    }
  }
}
mutation DeleteCategory($oid: UUID!) {
  deleteCategory(input: { oid: $oid }) {
    category {
      oid
      id
    }
  }
}
mutation CreateProduct($product: ProductInput!) {
  createProduct(input: { product: $product }) {
    product {
      ...Product
    }
  }
}

mutation UpdateProduct($product: ProductPatch!, $oid: UUID!) {
  updateProduct(input: { patch: $product, oid: $oid }) {
    product {
      ...Product
    }
  }
}

mutation DeleteProduct($oid: UUID!) {
  deleteProduct(input: { oid: $oid }) {
    product {
      oid
    }
  }
}
